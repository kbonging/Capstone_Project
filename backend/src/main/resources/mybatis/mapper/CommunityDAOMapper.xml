<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webcore.platform.community.dao.CommunityDAO">

    <!--게시글 목록 조회 ResultMap-->
    <resultMap id="CommunityResultMap" type="com.webcore.platform.community.dto.CommunityListResponseDTO">
        <id property="communityIdx" column="community_idx" />
        <result property="memberIdx" column="member_idx" />
        <result property="categoryId" column="category_id" />
        <result property="codeNm" column="code_nm" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="viewCount" column="view_count" />
        <result property="likeCount" column="like_count" />
        <result property="regDate" column="reg_date" />
        <result property="auth" column="auth" />
        <result property="writerName" column="writer_name" />
    </resultMap>

    <!-- 게시글 상세 페이지 조회-->
    <resultMap id="CommunityDetailResultMap" type="com.webcore.platform.community.dto.CommunityDetailResponseDTO">
        <id property="communityIdx" column="community_idx" />
        <result property="categoryId" column="category_id" />
        <result property="categoryName" column="code_nm" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="viewCount" column="view_count" />
        <result property="likeCount" column="like_count" />
        <result property="likeByMe" column="liked_by_me" />
        <result property="auth" column="auth" />
        <result property="writerName" column="writer_name" />
        <result property="regDate" column="reg_date" />
        <result property="modDate" column="mod_date" />
    </resultMap>

    <!-- 검색키워드가 있을경우 -->
    <sql id="searchWhere">
        <if test="searchKeyword != null and searchKeyword != ''">
            <choose>
                <when test="searchCondition != null and searchCondition != ''">
                    AND ${searchCondition} LIKE CONCAT('%', #{searchKeyword}, '%')
                </when>
                <otherwise>
                    AND (title LIKE CONCAT('%', #{searchKeyword}, '%')
                    OR content LIKE CONCAT('%', #{searchKeyword}, '%'))
                </otherwise>
            </choose>
        </if>

        <if test="categoryId != null and categoryId != ''">
            AND category_id = #{categoryId}
        </if>
    </sql>
    <!--게시판 전체 목록 조회-->
    <select id="selectCommunityList" parameterType="com.webcore.platform.community.dto.CommunityDTO" resultMap="CommunityResultMap">
        SELECT
            cm.community_idx,
            cm.member_idx,
            cm.category_id,
            cc.code_nm,
            cm.title,
            cm.content,
            cm.view_count,
            (
            SELECT COUNT(*)
            FROM tb_like l
            WHERE l.community_idx = cm.community_idx
            ) AS like_count,
            cm.reg_date,
            ma.auth,
            CASE
                WHEN ma.auth = 'ROLE_USER' THEN rp.nickname
                WHEN ma.auth = 'ROLE_OWNER' THEN op.business_name
                WHEN ma.auth = 'ROLE_ADMIN' THEN m.member_name
            ELSE '알 수 없음'
        END AS writer_name
        FROM tb_community cm
        JOIN tb_member m ON cm.member_idx = m.member_idx
        JOIN tb_member_auth ma ON m.member_idx = ma.member_idx
        JOIN tb_common_code cc ON cm.category_id=cc.code_id
        LEFT JOIN tb_reviewer_profile rp ON m.member_idx = rp.member_idx
        LEFT JOIN tb_owner_profile op ON m.member_idx = op.member_idx
        WHERE cm.del_yn='N'
        <include refid="searchWhere"></include>
        ORDER BY cm.reg_date DESC
        LIMIT #{firstIndex}, #{recordCount}
    </select>
    <!--게시글 수 조회-->
    <select id="selectCommunityCount" parameterType="com.webcore.platform.community.dto.CommunityDTO" resultType="int">
        SELECT COUNT(*)
        FROM tb_community cm
        JOIN tb_member m ON cm.member_idx = m.member_idx
        JOIN tb_member_auth ma ON m.member_idx = ma.member_idx
        JOIN tb_common_code cc ON cm.category_id=cc.code_id
        LEFT JOIN tb_reviewer_profile rp ON m.member_idx = rp.member_idx
        LEFT JOIN tb_owner_profile op ON m.member_idx = op.member_idx
        WHERE cm.del_yn='N'
        <include refid="searchWhere"></include>
    </select>
    <!--게시글 상세 정보 조회-->
    <select id="getCommunityByIdx" parameterType="java.util.Map" resultMap="CommunityDetailResultMap">
        SELECT
            cm.community_idx,
            cm.member_idx,
            cm.category_id,
            cc.code_nm,
            cm.title,
            cm.content,
            cm.view_count,
            cm.reg_date,
            cm.mod_date,
            (
                SELECT COUNT(*)
                FROM tb_like l
                WHERE l.community_idx = cm.community_idx
            ) AS like_count,
            CASE
                WHEN EXISTS(
                SELECT 1
                FROM tb_like l
                WHERE l.community_idx = cm.community_idx
                AND l.member_idx = #{memberIdx}
                ) THEN 1
                ELSE 0
            END AS liked_by_me,
            ma.auth,
            CASE
                WHEN ma.auth = 'ROLE_USER' THEN rp.nickname
                WHEN ma.auth = 'ROLE_OWNER' THEN op.business_name
                WHEN ma.auth = 'ROLE_ADMIN' THEN m.member_name
                ELSE '알 수 없음'
            END AS writer_name
        FROM tb_community cm
        JOIN tb_member m ON cm.member_idx = m.member_idx
        JOIN tb_member_auth ma ON m.member_idx = ma.member_idx
        JOIN tb_common_code cc ON cm.category_id = cc.code_id
        LEFT JOIN tb_reviewer_profile rp ON m.member_idx = rp.member_idx
        LEFT JOIN tb_owner_profile op ON m.member_idx = op.member_idx
        WHERE cm.community_idx = #{communityIdx}
        AND cm.del_yn = 'N'
    </select>
    <!--좋아요 증가-->
    <insert id="insertLike" parameterType="java.util.Map">
        INSERT INTO tb_like (community_idx, member_idx, reg_date )
        VALUES (#{communityIdx}, #{memberIdx}, NOW())
    </insert>
    <!--좋아요 취소(삭제)-->
    <delete id="deleteLike" parameterType="java.util.Map">
        DELETE FROM tb_like
        WHERE community_idx = #{communityIdx} AND member_idx = #{memberIdx}
    </delete>

    <update id="increaseViewCount">
        UPDATE tb_community
        SET view_count = view_count + 1
        WHERE community_idx = #{communityIdx}
    </update>

    <insert id="insertCommunity" parameterType="com.webcore.platform.community.dto.CommunityDTO"
            useGeneratedKeys="true" keyProperty="communityIdx">
        INSERT INTO tb_community (MEMBER_IDX, CATEGORY_ID, TITLE, CONTENT, REG_DATE)
        VALUES (#{memberIdx}, #{categoryId}, #{title}, #{content}, NOW());
    </insert>

    <update id="deleteCommunity" parameterType="com.webcore.platform.community.dto.CommunityDTO">
        UPDATE tb_community
        SET
            DEL_YN = 'Y',
            MOD_DATE = NOW()
        WHERE COMMUNITY_IDX = #{communityIdx}
            AND MEMBER_IDX = #{memberIdx};
    </update>

    <update id="updateCommunity" parameterType="com.webcore.platform.community.dto.CommunityDTO">
        UPDATE tb_community
        SET
            CATEGORY_ID = #{categoryId},
            TITLE = #{title},
            CONTENT = #{content},
            MOD_DATE = NOW()
        WHERE COMMUNITY_IDX = #{communityIdx}
            AND MEMBER_IDX = #{memberIdx}
            AND DEL_YN='N';
    </update>

</mapper>