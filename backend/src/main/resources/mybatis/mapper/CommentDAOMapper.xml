<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE mapper
            PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webcore.platform.dao.CommentDAO">

<!-- 커뮤니티 댓글 조회-->
<!--
        필요 없을지도?
        <resultMap id="CommentResultMap" type="com.webcore.platform.response.CommentListResponseDTO">
        <id property="commentIdx" column="comment_idx" />
        <result property="communityIdx" column="community_idx" />
        <result property="content" column="content" />
        <result property="parentId" column="parent_id" />
        <result property="depth" column="depth" />
        <result property="" column="" />
        <result property="" column="" />
        <result property="" column="" />
        <result property="" column="" />
        <result property="" column="" />
        <result property="" column="" />
    </resultMap>-->

    <select id="selectCommentListByCommunityIdx" parameterType="com.webcore.platform.domain.CommentDTO" resultType="com.webcore.platform.response.CommentListResponseDTO">
        SELECT
        c.comment_idx,
        c.community_idx,
        c.content,
        c.comment_type,
        CASE
        WHEN ma.auth = 'ROLE_USER' THEN rp.nickname
        WHEN ma.auth = 'ROLE_OWNER' THEN op.business_name
        WHEN ma.auth = 'ROLE_ADMIN' THEN m.member_name
        ELSE '알 수 없음'
        END AS writer_name,
        ma.auth,
        c.parent_id,
        c.depth,
        DATE_FORMAT(c.reg_date, '%Y-%m-%d %H:%i:%s') AS reg_date,
        DATE_FORMAT(c.mod_date, '%Y-%m-%d %H:%i:%s') AS mod_date
        FROM tb_comment c
        JOIN tb_member m ON c.member_idx = m.member_idx
        JOIN tb_member_auth ma ON m.member_idx = ma.member_idx
        LEFT JOIN tb_reviewer_profile rp ON m.member_idx = rp.member_idx
        LEFT JOIN tb_owner_profile op ON m.member_idx = op.member_idx
        WHERE c.del_yn = 'N'
        <if test="communityIdx != null">
            AND c.community_idx = #{communityIdx}
        </if>
        <if test="campaignIdx != null">
            AND c.campaign_idx = #{campaignIdx}
        </if>
        ORDER BY c.group_id ASC, c.sort_order ASC
    </select>

    <!--댓글 1개 조회-->
    <select id="getCommentById" parameterType="int" resultType="com.webcore.platform.domain.CommentDTO">
        SELECT COMMENT_IDX, COMMUNITY_IDX, CAMPAIGN_IDX, MEMBER_IDX, CONTENT, PARENT_ID,
                GROUP_ID, DEPTH, SORT_ORDER, COMMENT_TYPE, REG_DATE, MOD_DATE, DEL_YN
        FROM tb_comment
        WHERE COMMENT_IDX = #{commentIdx};
    </select>

    <!-- 커뮤니티 댓글 sort_order -->
    <select id="getMaxSortOrder" parameterType="int" resultType="int">
        SELECT MAX(sort_order)
        FROM tb_comment
        WHERE community_idx = #{communityIdx}
    </select>

    <!-- 캠페인 댓글 sort_order -->
    <select id="getMaxSortOrderByCampaign" parameterType="int" resultType="int">
        SELECT MAX(sort_order)
        FROM tb_comment
        WHERE campaign_idx = #{campaignIdx}
    </select>

    <!-- 2. 부모 댓글의 group_id 가져오기 -->
    <select id="getGroupIdForParent" parameterType="int" resultType="int">
        SELECT group_id
        FROM tb_comment
        WHERE comment_idx = #{parentId}
    </select>

    <!-- 부모 댓글의 depth 가져오기 -->
    <select id="getDepthForParent" parameterType="int" resultType="int">
        SELECT depth
        FROM tb_comment
        WHERE comment_idx = #{parentId}
    </select>

    <!-- 최상위 댓글 달기 -->
    <insert id="insertComment" parameterType="com.webcore.platform.domain.CommentDTO" useGeneratedKeys="true" keyProperty="commentIdx">
        INSERT INTO tb_comment (
        community_idx, campaign_idx, member_idx, content,
        depth, sort_order, comment_type,
        reg_date, del_yn
        ) VALUES (
        #{communityIdx}, #{campaignIdx}, #{memberIdx}, #{content},
        #{depth}, #{sortOrder}, #{commentType},
        NOW(), 'N'
        )
    </insert>

    <!-- 대댓글 달기 -->
    <insert id="insertReply" parameterType="com.webcore.platform.domain.CommentDTO">
        INSERT INTO tb_comment (
        community_idx, campaign_idx, member_idx, content,
        parent_id, group_id, depth, sort_order,
        comment_type, reg_date, del_yn
        ) VALUES (
        #{communityIdx}, #{campaignIdx}, #{memberIdx}, #{content},
        #{parentId}, #{groupId}, #{depth}, #{sortOrder},
        #{commentType}, NOW(), 'N'
        )
    </insert>

    <!-- 6. 댓글 등록 후 자기 자신의 comment_idx로 group_id 업데이트 -->
    <update id="updateGroupIdToSelf" parameterType="int">
        UPDATE tb_comment
        SET group_id = comment_idx
        WHERE comment_idx = #{commentIdx}
    </update>

    <!--커뮤니티 댓글 삭제-->
    <update id="deleteComment" parameterType="com.webcore.platform.domain.CommentDTO">
        UPDATE tb_comment
        SET
            DEL_YN = 'Y',
            MOD_DATE = NOW()
        WHERE COMMENT_IDX = #{commentIdx}
            AND MEMBER_IDX = #{memberIdx}
    </update>

    <update id="updateComment" parameterType="com.webcore.platform.domain.CommentDTO">
        UPDATE tb_comment
        SET
            CONTENT = #{content},
            MOD_DATE = NOW()
        WHERE COMMENT_IDX = #{commentIdx}
            AND DEL_YN = 'N'
    </update>
</mapper>