<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.webcore.platform.owner.dao.OwnerDAO">
    <!--소상공인 정보 ResultMap-->
    <resultMap id="memberWithOwnerResultMap" type="com.webcore.platform.owner.dto.OwnerDTO">
        <!-- TB_MEMBER -->
        <id property="memberIdx" column="member_idx" />
        <result property="memberId" column="member_id" />
        <result property="memberName" column="member_name" />
        <result property="memberEmail" column="member_email" />
        <result property="memberPhone" column="member_phone" />
        <result property="profileImgUrl" column="profile_img_url" />
        <result property="intro" column="intro" />
        <result property="heartCount" column="heart_count" />
        <result property="penalty" column="penalty" />
        <result property="delYn" column="del_yn" />
        <result property="regDate" column="reg_date" />

        <!-- Owneer 전용 필드 -->
        <result property="businessName" column="business_name" />
        <result property="businessUrl" column="business_url" />

        <!-- auth 리스트 -->
        <collection property="authDTOList" ofType="com.webcore.platform.member.dto.MemberAuthDTO">
            <result property="auth" column="auth" />
        </collection>
    </resultMap>
    <!-- 소상공인 프로필 등록 -->
    <insert id="insertOwnerProfile">
        INSERT INTO TB_OWNER_PROFILE (MEMBER_IDX, BUSINESS_NAME, BUSINESS_URL)
        VALUES (
        #{memberIdx}, #{businessName}, #{businessUrl}
        );
    </insert>

    <!--(소상공인) 회원 고유 번호로 회원 정보 조회-->
    <select id="selectOwnerByIdx" parameterType="java.lang.Integer" resultMap="memberWithOwnerResultMap">
        select mb.member_idx, mb.member_id, mb.member_name, mb.member_email, mb.member_phone,
            mb.profile_img_url, mb.intro, mb.heart_count, mb.penalty, mb.del_yn, mb.reg_date, au.auth,
            op.BUSINESS_NAME, op.BUSINESS_URL
        FROM tb_member mb JOIN tb_member_auth au
        ON mb.member_idx = au.member_idx
        JOIN tb_owner_profile op
        on mb.MEMBER_IDX=op.MEMBER_IDX
        where mb.member_idx=#{memberIdx};
    </select>

    <!-- 소상공인 프로필 수정 -->
    <update id="updateOwnerProfile" parameterType="com.webcore.platform.member.dto.MemberUpdateDTO">
        UPDATE tb_owner_profile
        SET BUSINESS_NAME = #{businessName},
        BUSINESS_URL = #{businessUrl}
        WHERE MEMBER_IDX = #{memberIdx}
    </update>



    <!-- 캠페인 소유자(member_idx) -->
    <select id="selectCampaignOwner" resultType="int">
        SELECT c.MEMBER_IDX
        FROM tb_campaign c
        WHERE c.CAMPAIGN_IDX = #{campaignId}
    </select>

    <!-- 공통 FROM/WHERE 블록: 채널 코드 기준을 c.CHANNEL_CODE 로 통일 -->
    <sql id="BASE_FROM_WHERE">
        FROM tb_review r
        JOIN tb_campaign_application a ON a.APPLICATION_IDX = r.APPLICATION_IDX
        JOIN tb_campaign c ON c.CAMPAIGN_IDX = a.CAMPAIGN_IDX
        JOIN tb_member m ON m.MEMBER_IDX = a.MEMBER_IDX
        LEFT JOIN tb_common_code cc
        ON cc.group_code = 'CAM_CHANNEL'
        AND cc.code_id   = c.CHANNEL_CODE   <!-- a → c 로 수정 -->
        WHERE a.CAMPAIGN_IDX = #{campaignId}
        <if test="channelCode != null and channelCode != ''">
            AND c.CHANNEL_CODE = #{channelCode}  <!-- a → c 로 수정 -->
        </if>
    </sql>

    <!-- 카운트 -->
    <select id="countOwnerReviews" parameterType="map" resultType="int">
        SELECT COUNT(1)
        <include refid="BASE_FROM_WHERE"/>
    </select>

    <!-- 리스트 -->
    <select id="selectOwnerReviews"
      parameterType="map"
      resultType="com.webcore.platform.owner.dto.OwnerReviewCheckListDTO">
        SELECT
        r.REVIEW_IDX                              AS reviewIdx,
        a.APPLICATION_IDX                         AS applicationIdx,
        m.MEMBER_ID                                AS reviewerName,  <!-- 컬럼명이 MEMBER_ID 라면 대문자로 -->
        c.CHANNEL_CODE                             AS channelCode,
        cc.code_nm                                 AS channelName,
        r.REVIEW_URL                               AS reviewUrl,
        r.IMAGE_URL                                AS imageUrl,
        DATE_FORMAT(r.REG_DATE, '%Y-%m-%d %H:%i')  AS submittedAt
        <include refid="BASE_FROM_WHERE"/>
        ORDER BY r.REG_DATE
        <choose>
            <when test="sortDir != null and sortDir.toLowerCase() == 'asc'">ASC</when>
            <otherwise>DESC</otherwise>
        </choose>
        LIMIT #{recordCount} OFFSET #{firstIndex}
    </select>

</mapper>